1. What is the difference between a declaration and a definition?
    > A declaration simply creates a variable identifier and describes its type.
    Example: int func(int, int);
    A definition implements this identifier by allocating memory space for the identifier and linking its reference.
    Example: int func(int i, int j) { return i * j; }
    One can declare an identifier as many times as they like. But one can define something exactly once.


2. What are header files used for?
    > Header files are a collection of predefined classes, functions and other identifiers.
    These files have the extension of “.hpp” and can be included in a C++ program by using “#include” preprocessing
    directive.
    During the compilation process, the preprocessor reads the “#include” directive and imports all the contents of
    the header filein the program code.



3. When a compiler creates a program, in what part of the construction process does it use header files and in what part
libraries?
    > The first step of the compilation process is the preprocessing.
    During the preprocessing phase, the preprocessor handles the header files and replaces the preprocessor directives with
    #include containing the names of the header files with the content of those header files, which are usually
    declarations.
    Then comes the compilation process where the C++ compiler reads the code and parses the symbols into assembly code with
    .s extension. This then gets read by the assembler to generate an object file which is in binary, with external
    references to libraries.
    After this, the linker resolves these references and links these libraries and/or other object files generated by the
    compilation (in case of multiple c++ files) and finally generates the binary executable. So the libraries are used in
    the linking process of the compilation.


4. Is a library an object module? Explain, and do not just answer yes or no.
    > A library is a pre-compiled binary file that contains the implementations of different functions, classes etc which
    are declared in the corresponding header file. A library is usually denoted by .lib extension and is linked by the
    linker during the compilation.
    An object module is a binary file generated by the assembler after operating on the assembly code generated by the
    compiler and translating that to machine code which contains unresolved references to these libraries. The linker links
    the libraries and resolves these references to create a complete picture and generate an executable.
    Therefore, a library is not an object module.


5. Why is an object files obtained after compiling a source containing int main() not an executable program?
    > Object files obtained after compiling a source code that contains main() might have references to different libraries
    specified by including their corresponding header files. Unless the codes in those libraries are linked to the source
    program, the program will not be able to execute properly. Hence, it is not an executable, yet.
